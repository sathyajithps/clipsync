use searchlight::{
    broadcast::{BroadcasterBuilder, ServiceBuilder},
    discovery::{DiscoveryBuilder, DiscoveryEvent},
    dns::rr::{RData, RecordType},
    net::IpVersion,
};
use std::net::Ipv4Addr;
// use std::{net::Ipv4Addr, time::Duration};

use std::{
    sync::{Arc, RwLock},
    thread,
};

use clipboard_rs::{
    Clipboard, ClipboardContent, ClipboardContext, ClipboardHandler, ClipboardWatcher,
    ClipboardWatcherContext, ContentFormat,
};

use touche::{Body, HttpBody, Method, Request, Response, Server};

const PORT: u16 = 6942;

fn get_clipboard_text_data(ctx: &ClipboardContext) -> Option<String> {
    match ctx.has(ContentFormat::Text) {
        true => match ctx.get_text() {
            Ok(text) => Some(text),
            _ => None,
        },
        false => None,
    }
}

struct Manager {
    ctx: ClipboardContext,
    last_pasted: Arc<RwLock<String>>,
    android_ip: Arc<RwLock<String>>,
}

impl Manager {
    pub fn new(android_ip: Arc<RwLock<String>>, last_pasted: Arc<RwLock<String>>) -> Self {
        let ctx = ClipboardContext::new().unwrap();

        Manager {
            ctx,
            last_pasted,
            android_ip,
        }
    }
}

impl ClipboardHandler for Manager {
    fn on_clipboard_change(&mut self) {
        if let Some(txt) = get_clipboard_text_data(&self.ctx) {
            if let Ok(android_ip) = self.android_ip.try_read() {
                if android_ip.is_empty() {
                    return;
                }

                if let Ok(lp) = self.last_pasted.try_read() {
                    if *lp == txt {
                        return;
                    }
                }

                let url = format!("http://{android_ip}/");

                match ureq::post(&url).send_string(&txt) {
                    Ok(res) => println!("Clipboard data sent. Response code: {}", res.status()),
                    Err(e) => {
                        // TODO: set ip to null if servier is unreachable
                        eprintln!("Error while sending clipboard data: {}", e.to_string())
                    }
                }
            }
        }
    }
}

// fn spawn_ping_thread(ip_port: String, android_ip: Arc<RwLock<String>>) {
//     println!("Starting a ping thread");
//     thread::spawn(move || loop {
//         if let Ok(ip) = android_ip.try_read() {
//             if ip.is_empty() {
//                 break;
//             }
//         }

//         println!("Sending PING!");
//         match ureq::post(&format!("http://{ip_port}/"))
//             .set("PING", "PING")
//             .set(
//                 "IP",
//                 &format!(
//                     "{}:{}",
//                     local_ip_address::local_ip().unwrap().to_string(),
//                     PORT
//                 ),
//             )
//             .call()
//         {
//             Ok(res) => {
//                 let status = res.status();
//                 let body = match res.into_string() {
//                     Ok(b) => b,
//                     Err(_) => String::new(),
//                 };

//                 if status != 200 && body != "PONG" {
//                     if let Ok(mut ip) = android_ip.try_write() {
//                         *ip = String::new();
//                         break;
//                     }
//                 }
//                 println!("Received PONG!")
//             }
//             Err(e) => {
//                 println!("{:?}", e);
//                 eprintln!("Error while sending PING");
//             }
//         }

//         thread::sleep(Duration::from_secs(2));
//     });
// }

fn main() {
    let android_ip: Arc<RwLock<String>> = Arc::new(RwLock::new(String::new()));
    let last_pasted: Arc<RwLock<String>> = Arc::new(RwLock::new(String::new()));

    let _broadcaster = BroadcasterBuilder::new()
        .add_service(
            ServiceBuilder::new("_clipsync._tcp.local.", "laptop", 6942)
                .unwrap()
                .add_ip_address(local_ip_address::local_ip().unwrap())
                .build()
                .unwrap(),
        )
        .build(IpVersion::V4)
        .unwrap()
        .run_in_background();

    let android_ip_clone = android_ip.clone();

    let _discovery = DiscoveryBuilder::new()
        .service("_clipsync._tcp.local.")
        .unwrap()
        .build(IpVersion::V4)
        .unwrap()
        .run_in_background(move |event| {
            match event {
                DiscoveryEvent::ResponderFound(responder) => {
                    let ip = responder
                        .last_response
                        .answers()
                        .iter()
                        .find_map(|r| match &r.rr_type() {
                            RecordType::A => match &r.data() {
                                Some(RData::A(ip)) => Some(ip.clone()),
                                _ => None,
                            },
                            _ => None,
                        })
                        .unwrap_or(Ipv4Addr::UNSPECIFIED);

                    if ip.is_unspecified() {
                        return;
                    }

                    let port = responder
                        .last_response
                        .answers()
                        .iter()
                        .find_map(|r| match &r.rr_type() {
                            RecordType::SRV => match &r.data() {
                                Some(RData::SRV(srv_record)) => Some(srv_record.port()),
                                _ => None,
                            },
                            _ => None,
                        })
                        .unwrap_or(PORT);

                    let ip_port = format!("{ip}:{port}");

                    println!("Discovered: {ip_port}");

                    // spawn_ping_thread(ip_port.clone(), android_ip_clone.clone());

                    if let Ok(mut ip) = android_ip_clone.try_write() {
                        (*ip) = ip_port;
                        return;
                    }
                }
                _ => {}
            };
        });

    let manager = Manager::new(android_ip.clone(), last_pasted.clone());

    let mut watcher = ClipboardWatcherContext::new().unwrap();

    let _shutdown_handler = watcher.add_handler(manager).get_shutdown_channel();

    thread::spawn(|| {
        Server::builder()
            .max_threads(1)
            .try_bind(format!("0.0.0.0:{PORT}"))
            .unwrap()
            .serve(move |req: Request<Body>| {
                let response = Response::builder();

                if req.method() == Method::POST {
                    // if let Some(Ok(value)) = req.headers().get("PING").map(|v| v.to_str()) {
                    //     if value == "PING" {
                    //         println!("Received PING!");
                    //         let pinged_android_ip =
                    //             req.headers().get("IP").unwrap().to_str().unwrap();
                    //         println!("Received android ip from PING: {pinged_android_ip}");

                    //         if let Ok(mut ip) = android_ip.try_write() {
                    //             if ip.is_empty() {
                    //                 println!("Discovered: {pinged_android_ip}");
                    //                 *ip = pinged_android_ip.to_string();
                    //                 spawn_ping_thread(
                    //                     pinged_android_ip.to_string(),
                    //                     android_ip.clone(),
                    //                 );
                    //             }
                    //         }

                    //         return response.status(200).body("PONG");
                    //     }
                    // }

                    let body = req.into_body().into_bytes().unwrap_or_default();
                    if !body.is_empty() {
                        if let Ok(data) = String::from_utf8(body) {
                            if let Ok(clipboard_ctx) = ClipboardContext::new() {
                                if clipboard_ctx
                                    .set(vec![ClipboardContent::Text(data.clone())])
                                    .is_err()
                                {
                                    return Response::builder()
                                        .status(500)
                                        .body(r#"{"status":"Could not set the clipboard data"}"#);
                                }

                                if let Ok(mut lp) = last_pasted.try_write() {
                                    *lp = data;
                                }

                                println!("Pasted to clipboard successfully");
                            }
                        }
                    }
                    return Response::builder().status(200).body(r#"{"status":"OK"}"#);
                } else {
                    return response
                        .status(400)
                        .body(r#"{"error":"Only POST Requests are allowed"}"#);
                }
            })
            .unwrap();
    });

    watcher.start_watch();
}
